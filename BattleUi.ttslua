require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("BattleUi")
local Util = require("Kdm/Util")
local NamedObject = require("Kdm/NamedObject")
local EventManager = require("Kdm/EventManager")
local Ui = require("Kdm/Ui")
local Location = require("Kdm/Location")

local BattleUi = {}

---------------------------------------------------------------------------------------------------

BattleUi.MAX_WEAPONS = 3

BattleUi.hiddenWeaponsBySurvivor = {}

---------------------------------------------------------------------------------------------------

function BattleUi.Init(modules, saveState, expansions, ui)
    BattleUi.InitModules(modules)
    BattleUi.InitSaveState(saveState)
    BattleUi.InitUi(ui)
end

---------------------------------------------------------------------------------------------------

local PlayerBoard = nil
local Showdown = nil

function BattleUi.InitModules(modules)
    PlayerBoard = modules.PlayerBoard
    Showdown = modules.Showdown
    Population = modules.Population
end

---------------------------------------------------------------------------------------------------

function BattleUi.InitSaveState(saveState)
    for survivorId, hiddenWeapons in pairs(saveState or {}) do
        local survivor = Population.SurvivorForId(survivorId)
        if survivor == nil then
            Log.Debugf("No survivor with ID %d doesn't exist", survivorId)
        else
            BattleUi.hiddenWeaponsBySurvivor[survivor] = hiddenWeapons
        end
    end
end

---------------------------------------------------------------------------------------------------

function BattleUi.GetAICardData(monsterName, aiCardName)
    local aiCardStats = {
        ["White Lion"] = {
            ["Basic Action"]  = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Claw"]          = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Maul"]          = { speed = 2, accuracy = 2, damage = 3, valid = true },
            ["Grasp"]         = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Chomp"]         = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Power Swat"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Revenge"]       = { speed = 2, accuracy = 2, damage = 2, valid = true },
            ["Combo Claw"]    = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Bat Around"]    = { speed = 2, accuracy = 5, damage = 1, valid = true },
            ["Bloddy Claw"]   = { speed = 2, accuracy = 2, damage = 2, valid = true },
            ["Vanish"]        = { speed = 4, accuracy = 2, damage = 2, valid = true },
        },
        ["Butcher"] = {
            ["Basic Action"]    = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Backhand"]        = { speed = 1, accuracy = 4, damage = 2, valid = true },
            ["Bite"]            = { speed = 2, accuracy = 4, damage = 0, valid = true },
            ["Kick"]            = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Hew"]             = { speed = 1, accuracy = 3, damage = 3, valid = true },
            ["Lantern Hunger"]  = { speed = 4, accuracy = 4, damage = 1, valid = true },
            ["Double Hack"]     = { speed = 4, accuracy = 4, damage = 1, valid = true },
            ["Infinite Kick"]   = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Hack"]            = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Wild Carve"]      = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Devour Lantern"]  = { speed = 2, accuracy = 4, damage = 1, valid = true },
            ["Hack City"]       = { speed = 4, accuracy = 4, damage = 1, valid = true },
        },
        ["Screaming Antelope"] = {
            ["Basic Action"]    = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Skewer"]    = { speed = 1, accuracy = 2, damage = 3, valid = true },
            ["Gore"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Great Kick"]    = { speed = 4, accuracy = 2, damage = 2, valid = true },
            ["Ravenous"]    = { speed = 1, accuracy = 2, damage = 2, valid = true },
            ["Buck"]    = { speed = 1, accuracy = 3, damage = 1, valid = true },
            ["Stomp"]    = { speed = 1, accuracy = 2, damage = 2, valid = true },
            ["Ram"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Back Kick"]    = { speed = 1, accuracy = 3, damage = 3, valid = true },
            ["Bolt"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Crush and Devour"]    = { speed = 2, accuracy = 2, damage = 0, valid = true },
            ["Slam"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Bite"]    = { speed = 1, accuracy = 2, damage = 2, valid = true },
            ["Run Down"]    = { speed = 1, accuracy = 2, damage = 1, valid = true },
        },
        ["Gorm"] = {
            ["Basic Action"]  = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Aggravated Bite"]  = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Backslap"]  = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Headbutt"]  = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Wallop"]  = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Maw-Arm Toss"]  = { speed = 2, accuracy = 2, damage = 1, valid = true },
            ["Ancient Tusks"]  = { speed = 3, accuracy = 2, damage = 4, valid = true },
            ["Ancient Bite"]  = { speed = 3, accuracy = 2, damage = 7, valid = true },
            ["Eat and Run"]  = { speed = 2, accuracy = 2, damage = 2, valid = true },
            ["Head Thrash"]  = { speed = 2, accuracy = 2, damage = 2, valid = true },
            ["Flatten"]  = { speed = 5, accuracy = 2, damage = 2, valid = true },
            ["Charge"]  = { speed = 4, accuracy = 2, damage = 2, valid = true },
            ["Rampaging"]  = { speed = 2, accuracy = 2, damage = 2, valid = true },
            ["Body Check"]  = { speed = 1, accuracy = 2, damage = 1, valid = true },
            ["Scratch"]  = { speed = 1, accuracy = 2, damage = 1, valid = true },
        }
    }

    local monCards = aiCardStats[monsterName];
    if monCards ~= nil then
        local aiCardStat = monCards[aiCardName];
        if aiCardStat ~= nil then
            return aiCardStat;
        end
    end

    return { valid = false, speed = 0, accuracy = 0, damage = 0 }
end

---------------------------------------------------------------------------------------------------

function BattleUi.GetMonsterName()
    -- this works but maybe there's a better way?
    local location = Location.Get("Basic Action")
    local aiCards = location:FindAll("AI")
    for _, entry in ipairs(aiCards) do
        local name = entry.getName();
        return string.gsub(name, " Basic Action", "")
    end

    Log.Printf("Could not find basic action card.  Don't know which monster we are fighting")
    return ""
end

---------------------------------------------------------------------------------------------------

function BattleUi.InitUi(ui)
    local TEXT_COLOR = "#ffffffdc"
    local DISABLED_TEXT_COLOR = "#ffffff60"

    local DARK_COLORS = "#00000000|#ffffff10|#ffffff20|#ffffffff"
    local DARK_SELECTED_COLORS = "#ffffff20|#ffffff30|#ffffff40|#ffffffff"

    BattleUi.ui = {}

    local yOffset = -80;
    Ui.Image(ui, { id = "BattleUi", rectAlignment = "MiddleLeft", x = 10, y = -20+yOffset, width = 50, height = 50, image = "BattleUi" })
    Ui.Button(ui, { id = "BattleUi", rectAlignment = "MiddleLeft", x = 10-1, y = -20+1+yOffset, width = 50+2, height = 50+2, colors = DARK_COLORS, onClick = function()
        if BattleUi.ui.open then
            BattleUi.Hide()
        else
            BattleUi.Show()
        end
    end })

    local playerCircleImages = {
        "RedCircle",
        "GreenCircle",
        "BlueCircle",
        "WhiteCircle",
    }


    local monsterMarker = getObjectFromGUID('78fc60')
    local monsterMarkerPositions = {
        vector(-45.50, 1.70, -27),
        vector(-21.50, 1.70, -27),
        vector(2.50, 1.70, -27),
        vector(26.50, 1.70, -27),
    }

    local playerColors = {
        {r = 135/255, g = 68/255, b = 42/255},
        {r = 105/255, g = 135/255, b = 41/255},
        {r = 88/255, g = 110/255, b = 121/255},
        {r = 180/255, g = 180/255, b = 180/255},
    }

    Ui.Image(ui, { id = "NextTurn", rectAlignment = "MiddleLeft", x = 10, y = -80+yOffset, width = 50, height = 50, image = "NextTurn" })
    Ui.Button(ui, { id = "NextTurn", rectAlignment = "MiddleLeft", x = 10-1, y = -80+1+yOffset, width = 50+2, height = 50+2, colors = DARK_COLORS, onClick = function()

        local currentPosition = monsterMarker.getPosition()
        local newPosition = currentPosition
        for player = 1, 3 do
            if currentPosition == monsterMarkerPositions[player] then
                _, newPosition = next(monsterMarkerPositions, player)
                printToAll('Player ' .. player + 1, playerColors[player + 1])
                monsterMarker.setPosition(newPosition, false, false)
                break
            end
        end

        if currentPosition == newPosition then
            printToAll('Player 1', playerColors[1])
            monsterMarker.setPosition(monsterMarkerPositions[1], false, false)
        end

        Log.Printf("Resetting survival actions")
        for i = 1, 4 do
            local survivalTokens = Location.Get("Player "..i.." Survival Tokens"):FindAll("Survival Token")
            for _, token in ipairs(survivalTokens) do
                rot = token.getRotation()
                if rot.z >= 15 and rot.z <= 345    then
                    token.flip()
                end
            end
        end

        Log.Printf("Resetting player turns")
        for i = 1, 4 do
            local player = BattleUi.ui.players[i]
            player.turnEnded = false
            player.playerCircleImage:SetImage(playerCircleImages[i])
            player.nameText:SetColor(TEXT_COLOR)
            player.nameText:SetFontStyle("Normal")
            player.endTurnButton:SetColors(DARK_COLORS)
        end
    end })

    BattleUi.ui.open = false
    BattleUi.ui.panel = Ui.Panel(ui, { id = "BattleUi", rectAlignment = "UpperLeft", x = 70, y = -210, width = 436, height = 608, color = "#00000000", active = BattleUi.ui.open })
    BattleUi.ui.panel.attributes.allowDragging = true
    BattleUi.ui.panel.attributes.returnToOriginalPositionWhenReleased = false

    BattleUi.ui.players = {}

    local diceRollerGuids = {
        "08c670",
        "eda0a0",
        "53cf34",
        "56c580"
    };
    for playerNumber = 1, 4 do
        local playerBoard = PlayerBoard.ForPlayer(playerNumber)
        local player = { height = 140 }
        BattleUi.ui.players[playerNumber] = player

        player.open = true
        player.panel = Ui.Panel(BattleUi.ui.panel, { id = "Player"..playerNumber, rectAlignment = "UpperLeft", x = 0, y = -(player.height + 16) * (playerNumber - 1), width = 606, height = player.height, color = "#121212ff" })
        player.playerCircleImage = Ui.Image(player.panel, { id = "PlayerCircle", rectAlignment = "UpperLeft", x = 8, y = -8, width = 25, height = 25, image = playerCircleImages[playerNumber] })
        player.nameText = Ui.Text(player.panel, { id = "Name", rectAlignment = "UpperLeft", x = 38, y = -8, width = 280, height = 25, fontSize = 16, color = TEXT_COLOR, text = "Survivor with a very long name" })

        player.turnEnded = false
        Ui.Image(player.panel, { id = "EndTurn", rectAlignment = "UpperLeft", x = 324, y = -8, width = 48, height = 25, image = "BR_Sleep" })
        player.endTurnButton = Ui.Button(player.panel, { id = "EndTurn", rectAlignment = "UpperLeft", x = 324-1, y = -8+1, width = 48+2, height = 25+2, colors = DARK_COLORS, onClick = function()
            player.turnEnded = not player.turnEnded
            if player.turnEnded then
                Log.Printf("Player %d: %s turn ended", playerNumber, playerBoard:Survivor():NameOrUnnamed())
                player.playerCircleImage:SetImage("GreyCircle")
                player.nameText:SetColor(DISABLED_TEXT_COLOR)
                player.nameText:SetFontStyle("Italic")
                player.endTurnButton:SetColors(DARK_SELECTED_COLORS)
            else
                Log.Printf("Player %d: %s next turn", playerNumber, playerBoard:Survivor():NameOrUnnamed())
                player.playerCircleImage:SetImage(playerCircleImages[playerNumber])
                player.nameText:SetColor(TEXT_COLOR)
                player.nameText:SetFontStyle("Normal")
                player.endTurnButton:SetColors(DARK_COLORS)
            end
        end})

        player.showWeaponsImage = Ui.Image(player.panel, { id = "ShowWeapons", rectAlignment = "UpperLeft", x = 380, y = -8, width = 48, height = 25, image = "BR_Show" })
        player.showWeaponsButton = Ui.Button(player.panel, { id = "ShowWeapons", rectAlignment = "UpperLeft", x = 380-1, y = -8+1, width = 48+2, height = 25+2, colors = DARK_COLORS, onClick = function()
            local survivor = playerBoard:Survivor()
            Log.Printf("Showing all weapons for %s", survivor:NameOrUnnamed())
            BattleUi.hiddenWeaponsBySurvivor[survivor] = nil
            BattleUi.UpdatePlayer(playerBoard)
        end})

        player.monAttackImage = Ui.Image(player.panel, { id = "MonAttackImage", rectAlignment = "UpperLeft", x = 436, y = -8, width = 48, height = 25, image = "BR_MonsterAttack" })
        player.monAttackButton = Ui.Button(player.panel, { id = "MonAttack", rectAlignment = "UpperLeft", x = 436-1, y = -8+1, width = 48+2, height = 25+2, colors = DARK_COLORS, onClick = function()
            local survivor = playerBoard:Survivor()
            local diceSpawner = getObjectFromGUID("41f410")

            local monsterToughness = Showdown.MonsterToughness()
            local monsterEvasion = Showdown.MonsterEvasion()
            local monsterLuck = Showdown.MonsterLuck()

            local monsterSpeed = Showdown.MonsterSpeed()
            local monsterAcc = Showdown.MonsterAccuracy()
            local monsterDamage = Showdown.MonsterDamage()

            local location = Location.Get("AI")
            local aiCards = location:FindAll("AI")
            local aiCard;
            for _, entry in ipairs(aiCards) do
                rot = entry.getRotation()
                -- look through everything in AI stack and ignore upside cards since there might only be a single upside down card in deck
                if not (rot.z >= 15 and rot.z <= 345) then
                    aiCard = entry;
                    break;
                end
            end
            local aiCardName;
            if aiCard then
                aiCardName = aiCard.getName()
            elseif #aiCards == 0 then
                aiCardName = "Basic Action"
            end

            if aiCardName == nil then
                Log.Printf("Can not find active AI card.  Turn over top AI card and put it on top of the AI Deck")
            else
                local monsterName = BattleUi.GetMonsterName();
                Log.Printf("Found AI card %s's %s", monsterName, aiCardName)
                local cardData = BattleUi.GetAICardData(monsterName, aiCardName)

                if cardData.valid then
                    local totalSpeed = monsterSpeed + cardData.speed;

                    local totalAcc = cardData.accuracy - monsterAcc + survivor.evasion; -- note: positive monster accuracy make it easier to hit player
                    totalAcc = Util.Max(2, totalAcc); -- but capped at 2+.  1 always misses
                    totalAcc = Util.Min(10, totalAcc); -- but capped at 10-.  10 always hits

                    local totalDamage = monsterDamage + cardData.damage;
                    Log.Printf("Monster attacking %s. Speed %d. Needs %d to hit (%d card, %d monster, %d player)", survivor:NameOrUnnamed(), totalSpeed, totalAcc, cardData.accuracy, -monsterAcc, survivor.evasion)
                    Log.Printf("If hit, monster does %d damage (%d card, %d base)", totalDamage, cardData.damage, monsterDamage)
                    diceSpawner.call('spawnDice', {playerColor = "White", number = totalSpeed, valueNeeded = totalAcc})
                else
                    Log.Printf("AI card %s doesn't have stats. Can not auto-roll against it", aiCardName)
                end
            end
        end})

        player.weaponImages = {}
        player.weaponShowWeaponsButtons = {}
        player.weaponNameTexts = {}
        player.weaponSpeedTexts = {}
        player.weaponHitTexts = {}
        player.weaponWoundTexts = {}
        player.weaponCritTexts = {}
        player.attackWeaponImages = {}
        player.attackBlindWeaponImages = {}
        player.woundWeaponImages = {}
        player.attackWeaponButton = {}
        player.attackBlindWeaponButton = {}
        player.woundWeaponButton = {}
        player.attacking = false
        local y = -41
        for i = 1, BattleUi.MAX_WEAPONS do
            player.weaponImages[i] = Ui.Image(player.panel, { id = "Weapon"..i, rectAlignment = "UpperLeft", x = 8, y = y, width = 420, height = 25, image = "BR_Weapon" })
            player.weaponShowWeaponsButtons[i] = Ui.Button(player.panel, { id = "WeaponName"..i, rectAlignment = "UpperLeft", x = 8-1, y = y+1, width = 8+19+8+2, height = 25+2, colors = DARK_COLORS, onClick = function()
                local weaponName = player.weaponNameTexts[i]:Text()
                local survivor = playerBoard:Survivor()
                Log.Printf("Hiding %s for %s", weaponName, survivor:NameOrUnnamed())
                if not BattleUi.hiddenWeaponsBySurvivor[survivor] then
                    BattleUi.hiddenWeaponsBySurvivor[survivor] = {}
                end
                BattleUi.hiddenWeaponsBySurvivor[survivor][weaponName] = true
                BattleUi.UpdatePlayer(playerBoard)
            end })
            player.weaponNameTexts[i]  = Ui.Text(player.panel, { id = "WeaponName"..i,  rectAlignment = "UpperLeft", x =  43, y = y, width = 172, height = 25, color = TEXT_COLOR, fontSize = 14, text = "Calcified Juggernaut Blade" })
            player.weaponSpeedTexts[i] = Ui.Text(player.panel, { id = "WeaponSpeed"..i, rectAlignment = "UpperLeft", x = 243, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })
            player.weaponHitTexts[i]   = Ui.Text(player.panel, { id = "WeaponHit"..i,   rectAlignment = "UpperLeft", x = 288, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })
            player.weaponWoundTexts[i] = Ui.Text(player.panel, { id = "WeaponWound"..i, rectAlignment = "UpperLeft", x = 334, y = y, width = 55, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44 (+44)" })
            player.weaponCritTexts[i]  = Ui.Text(player.panel, { id = "WeaponCrit"..i,  rectAlignment = "UpperLeft", x = 407, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })

            player.attackWeaponImages[i] = Ui.Image(player.panel, { id = "AttackWeaponImage"..i, rectAlignment = "UpperLeft", x = 440, y = y, width = 50, height = 25, image = "BR_Attack" })
            player.attackWeaponButton[i] = Ui.Button(player.panel, { id = "AttackWeaponButton"..i, rectAlignment = "UpperLeft", x = 440+5, y = y+1, width = 8+19+8+2, height = 25+2, colors = DARK_COLORS, onClick = function()
                if not player.attacking then
                    Wait.time(function() player.attacking = false; end, 2)
                    player.attacking = true;

                    local survivor = playerBoard:Survivor()
                    local weapons = BattleUi.CalcWeapons(playerBoard, survivor)
                    local weapon = weapons[i]
                    Log.Printf("Attacking %s for %s", weapon.name, survivor:NameOrUnnamed())
                    local diceGuid = diceRollerGuids[playerBoard:Number()]
                    local diceSpawner = getObjectFromGUID(diceGuid)
                    local playerSpeed = weapon.speed;
                    local playerToHit = weapon.hit;
                    Log.Printf("%s attempting to hit with %s. Speed %d. Need %d hit", survivor:NameOrUnnamed(), weapon.name, playerSpeed, playerToHit)
                	diceSpawner.call('spawnDice', {playerColor = "White", number = playerSpeed, valueNeeded = playerToHit})
                end
            end })

            player.attackBlindWeaponImages[i] = Ui.Image(player.panel, { id = "AttackBlindWeaponImage"..i, rectAlignment = "UpperLeft", x = 495, y = y, width = 50, height = 25, image = "BR_AttackBlind" })
            player.attackBlindWeaponButton[i] = Ui.Button(player.panel, { id = "AttackBlindWeaponButton"..i, rectAlignment = "UpperLeft", x = 495+5, y = y+1, width = 8+19+8+2, height = 25+2, colors = DARK_COLORS, onClick = function()
                if not player.attacking then
                    Wait.time(function() player.attacking = false; end, 2)
                    player.attacking = true;

                    local survivor = playerBoard:Survivor()
                    local weapons = BattleUi.CalcWeapons(playerBoard, survivor)
                    local weapon = weapons[i]
                    Log.Printf("Attacking %s for %s", weapon.name, survivor:NameOrUnnamed())
                    local diceGuid = diceRollerGuids[playerBoard:Number()]
                    local diceSpawner = getObjectFromGUID(diceGuid)
                    local playerSpeed = weapon.speed;
                    local playerToHit = weapon.hit - 1;
                    Log.Printf("%s attempting to hit from blind with %s. Speed %d. Need %d hit", survivor:NameOrUnnamed(), weapon.name, playerSpeed, playerToHit)
                	diceSpawner.call('spawnDice', {playerColor = "White", number = playerSpeed, valueNeeded = playerToHit})
                end
            end })

            player.woundWeaponImages[i] = Ui.Image(player.panel, { id = "WoundWeaponImage"..i, rectAlignment = "UpperLeft", x = 550, y = y, width = 50, height = 25, image = "BR_Wound" })
            player.woundWeaponButton[i] = Ui.Button(player.panel, { id = "WoundWeaponButton"..i, rectAlignment = "UpperLeft", x = 550+5, y = y+1, width = 8+19+8+2, height = 25+2, colors = DARK_COLORS, onClick = function()
                if not player.attacking then
                    Wait.time(function() player.attacking = false; end, 2)
                    player.attacking = true;

                    local survivor = playerBoard:Survivor()
                    local weapons = BattleUi.CalcWeapons(playerBoard, survivor)
                    local weapon = weapons[i]
                    local diceGuid = diceRollerGuids[playerBoard:Number()]
                    local diceSpawner = getObjectFromGUID(diceGuid)
                    local playerToWound = weapon.wound;
                    local critValue = weapon.crit;
                    Log.Printf("%s attempting to wound with %s. Need %d wound, %d for crit", survivor:NameOrUnnamed(), weapon.name, playerToWound, critValue)
                	diceSpawner.call('spawnDice', {playerColor = "White", number = 1, valueNeeded = playerToWound, critValueNeeded = critValue})
                end
            end })
            y = y - 33
        end
    end
end

---------------------------------------------------------------------------------------------------

BattleUi.RELEVANT_STATS = {
    ["Name"] = true,
    ["Toughness"] = true,
    ["Speed"] = true,
    ["Accuracy"] = true,
    ["Strength"] = true,
    ["Evasion"] = true,
    ["Luck"] = true,
}

function BattleUi.PostInit()
    EventManager.AddHandler("onShowdownStart", BattleUi.Show)
    EventManager.AddHandler("onShowdownCleanup", BattleUi.Hide)
    EventManager.AddHandler("onPlayerBoardLinkSurvivor", function(playerBoard) BattleUi.UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUnlinkSurvivor", function(playerBoard) BattleUi.UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onMonsterStatChange", function(stat)
        if BattleUi.RELEVANT_STATS[stat] then
            BattleUi.Update()
        end
    end)
    EventManager.AddHandler("onSurvivorStatChange", function(survivor, stat, value)
        if BattleUi.RELEVANT_STATS[stat] then
            BattleUi.Update()
        end
    end)
    EventManager.AddHandler("onPlayerBoardLinkWeapon", function(playerBoard) BattleUi.UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUpdateWeapon", function(playerBoard) BattleUi.UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUnlinkWeapon", function(playerBoard) BattleUi.UpdatePlayer(playerBoard) end)

    EventManager.AddHandler("onDeleteSurvivor", function(survivor)
        BattleUi.hiddenWeaponsBySurvivor[survivor] = nil
    end)


    BattleUi.Update()
    Wait.time(function() BattleUi.Update(); end, 0.5) -- sometimes Battle UI doesn't init its data properly since players aren't loaded yet so update again after a bit
--    BattleUi.Show()
end

---------------------------------------------------------------------------------------------------

function BattleUi.Save()
    local hiddenWeaponsBySurvivorId = {}
    for survivor, hiddenWeapons in pairs(BattleUi.hiddenWeaponsBySurvivor) do
        hiddenWeaponsBySurvivorId[survivor:Id()] = hiddenWeapons
    end
    return hiddenWeaponsBySurvivorId
end

---------------------------------------------------------------------------------------------------

function BattleUi.CalcWeapons(playerBoard, survivor)
    -- dedup and consolidate weapons
    local hiddenWeapons = BattleUi.hiddenWeaponsBySurvivor[survivor] or {}
    local weapons = {}
    local weaponCounts = {}
    setmetatable(weaponCounts, {  __index = function() return 0 end })
    for _, weapon in pairs(playerBoard:Weapons()) do
        local name = weapon.name
        if not hiddenWeapons[name] then
            local count = weaponCounts[name]
            weaponCounts[name] = count + 1
            if count == 0 then
                table.insert(weapons, weapon)
            end
        end
    end
    table.sort(weapons, function(w1, w2) return w1.name < w2.name end)

    local survivorSpeed = survivor:Speed()
    local survivorAccuracy = survivor:Accuracy()
    local survivorStrength = survivor:Strength()
    local survivorLuck = survivor:Luck()
    local monsterEvasion = Showdown.MonsterEvasion()
    local monsterToughness = Showdown.MonsterToughness()
    local monsterLuck = Showdown.MonsterLuck()

    local results = {}
    for _, weapon in ipairs(weapons) do
        local name, stats = weapon.name, weapon.stats

        local speed = stats.speed + survivorSpeed
        -- accuracy goes the opposite way
        local accuracy = stats.accuracy - survivorAccuracy
        local strength = stats.strength + survivorStrength
        local luck = (stats.deadly or 0) + survivorLuck

        for _, modifier in pairs(weapon.modifiers) do
            if modifier.stat == "speed" then
                speed = speed + modifier.value
            elseif modifier.stat == "accuracy" then
                -- accuracy goes the opposite way
                accuracy = accuracy - modifier.value
            elseif modifier.stat == "strength" then
                strength = strength + modifier.value
            elseif modifier.stat == "luck" then
                luck = luck + modifier.value
            end
        end

        hit = Util.Clamp(accuracy + monsterEvasion, 2, 10)
        wound = Util.Max(monsterToughness - strength, 2)    -- sharp weapons means we need to show the target roll if it's past 10
        crit = Util.Clamp(10 - luck + monsterLuck, 2, 10)

        if stats.paired and weaponCounts[name] > 1 then
            speed = speed + stats.speed
        end
        if stats.slow then
            speed = 1
        end

        table.insert(results, {
            name = name,
            speed = speed,
            hit = hit,
            wound = wound,
            strength = strength,
            crit = crit,
        })
    end

    return results
end

---------------------------------------------------------------------------------------------------

function BattleUi.UpdatePositions()
    local y = 0
    for i = 1, 4 do
        local player = BattleUi.ui.players[i]
        player.panel:SetOffsetXY("0 "..y)
        if player.open then
            y = y - BattleUi.ui.players[i].height - 16
        end
    end
    BattleUi.ui.panel:SetHeight(-y - 16)
end

---------------------------------------------------------------------------------------------------

function BattleUi.UpdatePlayerInternal(playerBoard)
    local player = BattleUi.ui.players[playerBoard:Number()]

    local survivor = playerBoard:Survivor()
    if not survivor then
        Log.Debugf("Hiding BattleUi for player %d", playerBoard:Number())
        player.open = false
        player.height = 0
        player.panel:Hide()
        return
    end

    Log.Debugf("Updating BattleUi for player %d", playerBoard:Number())

    player.open = true
    player.panel:Show()

    player.nameText:SetText(survivor:NameOrUnnamed())
    player.showWeaponsButton:Show()
    player.monAttackButton:Show()
    local weapons = BattleUi.CalcWeapons(playerBoard, survivor)
    local numShownWeapons = Util.Min(#weapons, BattleUi.MAX_WEAPONS)
    for i = 1, numShownWeapons do
        local weapon = weapons[i]
        player.weaponImages[i]:Show()
        player.attackWeaponImages[i]:Show()
        player.attackBlindWeaponImages[i]:Show()
        player.woundWeaponImages[i]:Show()
        player.weaponShowWeaponsButtons[i]:Show()
        player.attackWeaponButton[i]:Show()
        player.attackBlindWeaponButton[i]:Show()
        player.woundWeaponButton[i]:Show()
        player.weaponNameTexts[i]:Show()
        player.weaponNameTexts[i]:SetText(weapon.name)
        player.weaponSpeedTexts[i]:Show()
        player.weaponSpeedTexts[i]:SetText(weapon.speed)
        player.weaponHitTexts[i]:Show()
        player.weaponHitTexts[i]:SetText(weapon.hit)
        player.weaponWoundTexts[i]:Show()
        player.weaponWoundTexts[i]:SetText(string.format("%d (%s%d)", weapon.wound, weapon.strength > 0 and "+" or "", weapon.strength))
        player.weaponCritTexts[i]:Show()
        player.weaponCritTexts[i]:SetText(weapon.crit)
    end
    for i = numShownWeapons + 1, BattleUi.MAX_WEAPONS do
        player.weaponImages[i]:Hide()
        player.attackWeaponImages[i]:Hide()
        player.attackBlindWeaponImages[i]:Hide()
        player.woundWeaponImages[i]:Hide()
        player.weaponShowWeaponsButtons[i]:Hide()
        player.attackWeaponButton[i]:Hide()
        player.attackBlindWeaponButton[i]:Hide()
        player.woundWeaponButton[i]:Hide()
        player.weaponNameTexts[i]:Hide()
        player.weaponSpeedTexts[i]:Hide()
        player.weaponHitTexts[i]:Hide()
        player.weaponWoundTexts[i]:Hide()
        player.weaponCritTexts[i]:Hide()
    end
    player.height = 8 + (numShownWeapons + 1) * 33
    player.panel:SetHeight(player.height)
end

function BattleUi.UpdatePlayer(playerBoard)
    BattleUi.UpdatePlayerInternal(playerBoard)
    BattleUi.UpdatePositions()
end

---------------------------------------------------------------------------------------------------

function BattleUi.Update()
    for i = 1, 4 do
        BattleUi.UpdatePlayerInternal(PlayerBoard.ForPlayer(i))
    end
    BattleUi.UpdatePositions()
end

---------------------------------------------------------------------------------------------------

function BattleUi.Show()
    Log.Debugf("Showing battle reference")
    BattleUi.ui.panel:Show()
    BattleUi.ui.open = true
end

---------------------------------------------------------------------------------------------------

function BattleUi.Hide()
    Log.Debugf("Hiding battle reference")
    BattleUi.ui.panel:Hide()
    BattleUi.ui.open = false
end

---------------------------------------------------------------------------------------------------

return {
    Init = BattleUi.Init,
    PostInit = BattleUi.PostInit,
    Save = BattleUi.Save,
}
